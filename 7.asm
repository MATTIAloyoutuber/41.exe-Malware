[BITS 16]
[ORG 0x7C00]

%define WSCREEN 320
%define HSCREEN 200
%define TIMER_FREQ 18.2
%define TIMER_LIMIT 364  ; 20 seconds * 18.2 Hz = 364

BootMain:
        call setup
        call start_timer
        call pattern

setup:
        push    0xA000
        pop     es

        mov     ax, 0x13
        int     0x10

        xor     cx, cx
        xor     dx, dx

        ret

start_timer:
        xor     ax, ax
        int     0x1A        ; BIOS timer interrupt (INT 1Ah, AH=00h)
        mov     [start_time], dx
        ret

check_timer:
        xor     ax, ax
        int     0x1A        ; BIOS timer interrupt (INT 1Ah, AH=00h)
        sub     dx, [start_time]
        cmp     dx, TIMER_LIMIT
        jae     rotozoomer_loop
        ret

pattern:
        call check_timer

        mov     bx, cx
        xor     bx, dx

        mov     al, bl
        add     al, [iteration]

        shr     al, 5

        cmp     al, 30
        ja      subcolor

        cmp     al, 20
        jb      addcolor

        stosb
        jmp     setpixel

subcolor:
        sub     al, 50
        stosb
        jmp     setpixel

addcolor:
        add     al, 58
        stosb

setpixel:
        inc     cx
        cmp     cx, WSCREEN
        jae     nextline

        cmp     dx, HSCREEN
        jae     reset

        jmp     pattern

nextline:
        xor     cx, cx
        inc     dx
        jmp     pattern

reset:
        xor     cx, cx
        xor     dx, dx
        inc     word [iteration]
        jmp     pattern

rotozoomer_loop:
        call SetPalette
        jmp     Rotozoomer

Draw:
        cmp     bp, WSCREEN
        jae     NextLine

        cmp     dx, HSCREEN
        jae     ResetDraw

        stosb

        inc     bp

        jmp     Rotozoomer

NextLine:
        xor     bp, bp
        inc     dx

        jmp     Rotozoomer

ResetDraw:
        xor     bp, bp
        xor     dx, dx
        xor     di, di

        fld     dword [alpha]
        fadd    dword [angle]
        fstp    dword [angle]

        jmp     Rotozoomer

SetPalette:
        pusha

        xor     bx, bx

palette.loop:
        mov     dx, 0x3C8
        mov     al, bl
        out     dx, al

        mov     dx, 0x3C9

        mov     al, bl
        out     dx, al
        mov     al, 0
        out     dx, al
        out     dx, al

        mov     al, bl
        out     dx, al
        mov     al, bl
        out     dx, al
        out     dx, al

        inc     bx

        cmp     bx, 0xFF
        jb      palette.loop

        popa

        ret

Rotozoomer:
        mov     word [x], bp
        mov     word [y], dx

        fild    dword [angle]
        fsin
        fmul    dword [y]
        fstp    dword [r1]

        fild    dword [angle]
        fcos
        fmul    dword [x]
        fsub    dword [r1]
        fstp    dword [gx]

        fild    dword [angle]
        fcos
        fmul    dword [y]
        fstp    dword [r2]

        fild    dword [angle]
        fsin
        fmul    dword [x]
        fadd    dword [r2]
        fstp    dword [gy]

        mov     bx, [gx]
        xor     bx, [gy]

        and     bx, 10000

        mov     al, bl
        test    bp, 1
        jz      .use_red
        add     al, 20
        jmp     .continue
    .use_red:
        add     al, 10
    .continue:
        stosb

        jmp     Draw

x: dd 0.0
y: dd 0.0

gx: dw 0.0
gy: dw 0.0

r1: dd 0.0
r2: dd 0.0

angle: dd 100.00
alpha: dd 0.01

iteration: dw 0
start_time: dw 0

times 510 - ($ - $$) db 0
dw 0xAA55
